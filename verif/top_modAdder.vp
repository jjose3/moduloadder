//top_modAdder.vp


module `mname` ();

//; my $dut = generate_base("modAdder", "my_modAdder");


//; my $gb = generate("generic_bench", "BASIC_BENCH");

//; my $pc = generate("cycle_counter", "PERF_COUNT", CycleName=>"multRate_cyc");
//; my $ec = generate("cycle_counter", "ERROR_COUNT", CountName=>"mult_err_cnt");

    logic [7:0]	      a, b, sum;
    logic             clk;
    logic             rst;

    logic 			  perf ; 

    logic             sum_err ;

    logic             triggerStart;
    logic             triggerStop;
    int               seed;
    int               clk_period ;

    // Instantiate the design under test and basic bench
    `$dut->instantiate()` (.*);
    `$gb->instantiate()`  (.*);
    //;##`$pc->instantiate()`  (.triggerStart(perf), .triggerStop(triggerStop), .increment(r_vld), .clk(clk), .rst(rst) );
    `$ec->instantiate()`  (.triggerStart(triggerStart), .triggerStop(triggerStop), .increment(sum_err), .clk(clk), .rst(rst) );
   // TODO event counter

    // Simulation Narrative
    initial begin
    	triggerStart  = 1'b0 ;
    	triggerStop = 1'b0 ;
	sum_err = 0;
	a = 8'b0;
	b = 8'b0;
    	perf = 1'b0 ; 
    	//@(negedge rst);
    	repeat(10) @(posedge clk );
    	triggerStart  = 1'b1 ;
    	repeat(10) @(posedge clk );  //Wait 100k r_valids
    	perf = 1'b1 ;
    	repeat(10) @(posedge clk);  //Wait 100k r_valids
    	triggerStop = 1'b1 ;
    	repeat(10) @(posedge clk);
    	$finish();
    end

	always@(posedge clk) begin
		if( triggerStart && ~triggerStop) $display("a = %d, b = %d, sum = %d", $past(a,2), $past(b,2), sum);
	end

    // Frontend Driver
    always @( posedge clk ) begin
    	// Test bench driven signal start at negedg
    	//   so it is obv they came from the bench
	if( triggerStart && ~triggerStop) begin
	a = $random();
	b = $random();
	end
    end

    // Verification
    assert_mod: assert property (
    @(posedge clk) (
    	((triggerStart && ~triggerStop) -> (sum === (($past(a, 2)+$past(b, 2))>255?($past(a, 2)+$past(b, 2)-256):$past(a, 2)+$past(b, 2)))))) else sum_err = sum_err+1; 
endmodule 
