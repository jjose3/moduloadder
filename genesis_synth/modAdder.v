//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /afs/asu.edu/users/j/j/o/jjose3/modulo/moduloadder/rtl/modAdder.vp
//  Source template: modAdder
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

// modAdder.vp



module modAdder (
input logic [7:0] a,
input logic [7:0] b,
input logic clk,
input logic rst,
output logic [7:0] sum
);

logic [3:0] a_lsb;
logic [3:0] b_lsb;
logic [3:0] a_msb;
logic [3:0] b_msb;
logic [3:0] a_msb_s1;
logic [3:0] b_msb_s1;
logic [3:0] sum_lsb;
logic [3:0] sum_lsb_s1;
logic [3:0] sum_msb;
logic carry_nxt;
logic carry;
logic cout;

//assign {carry_nxt, sum_lsb[3:0]} = a_lsb[3:0] + b_lsb[3:0];

fourbitadder  FULLADDER_SUM_LSB ( .a(a_lsb[3:0]), .b(b_lsb[3:0]), .cin(1'b0), .s(sum_lsb[3:0]), .cout(carry_nxt) );

//assign sum_msb[3:0] = a_msb_s1[3:0] + b_msb_s1[3:0] + {3'b0, carry};

fourbitadder  FULLADDER_SUM_MSB ( .a(a_msb_s1[3:0]), .b(b_msb_s1[3:0]), .cin(carry), .s(sum_msb[3:0]), .cout(cout) );

dff  D_FLIP_FLOP_SUM_MSB0 ( .din(sum_msb[0]), .clk, .rst, .q(sum[4]) );
dff  D_FLIP_FLOP_SUM_MSB1 ( .din(sum_msb[1]), .clk, .rst, .q(sum[5]) );
dff  D_FLIP_FLOP_SUM_MSB2 ( .din(sum_msb[2]), .clk, .rst, .q(sum[6]) );
dff  D_FLIP_FLOP_SUM_MSB3 ( .din(sum_msb[3]), .clk, .rst, .q(sum[7]) );

dff  D_FLIP_FLOP_SUM_LSB0 ( .din(sum_lsb_s1[0]), .clk, .rst, .q(sum[0]) );
dff  D_FLIP_FLOP_SUM_LSB1 ( .din(sum_lsb_s1[1]), .clk, .rst, .q(sum[1]) );
dff  D_FLIP_FLOP_SUM_LSB2 ( .din(sum_lsb_s1[2]), .clk, .rst, .q(sum[2]) );
dff  D_FLIP_FLOP_SUM_LSB3 ( .din(sum_lsb_s1[3]), .clk, .rst, .q(sum[3]) );

dff  D_FLIP_FLOP_SUM_LSB_S10 ( .din(sum_lsb[0]), .clk, .rst, .q(sum_lsb_s1[0]) );
dff  D_FLIP_FLOP_SUM_LSB_S11 ( .din(sum_lsb[1]), .clk, .rst, .q(sum_lsb_s1[1]) );
dff  D_FLIP_FLOP_SUM_LSB_S12 ( .din(sum_lsb[2]), .clk, .rst, .q(sum_lsb_s1[2]) );
dff  D_FLIP_FLOP_SUM_LSB_S13 ( .din(sum_lsb[3]), .clk, .rst, .q(sum_lsb_s1[3]) );

dff  D_FLIP_FLOP_CARRY ( .din(carry_nxt), .clk, .rst, .q(carry) );

dff  D_FLIP_FLOP_A_LSB0 ( .din(a[0]), .clk, .rst, .q(a_lsb[0]) );
dff  D_FLIP_FLOP_A_LSB1 ( .din(a[1]), .clk, .rst, .q(a_lsb[1]) );
dff  D_FLIP_FLOP_A_LSB2 ( .din(a[2]), .clk, .rst, .q(a_lsb[2]) );
dff  D_FLIP_FLOP_A_LSB3 ( .din(a[3]), .clk, .rst, .q(a_lsb[3]) );

dff  D_FLIP_FLOP_B_LSB0 ( .din(b[0]), .clk, .rst, .q(b_lsb[0]) );
dff  D_FLIP_FLOP_B_LSB1 ( .din(b[1]), .clk, .rst, .q(b_lsb[1]) );
dff  D_FLIP_FLOP_B_LSB2 ( .din(b[2]), .clk, .rst, .q(b_lsb[2]) );
dff  D_FLIP_FLOP_B_LSB3 ( .din(b[3]), .clk, .rst, .q(b_lsb[3]) );

dff  D_FLIP_FLOP_A_MSB0 ( .din(a[4]), .clk, .rst, .q(a_msb[0]) );
dff  D_FLIP_FLOP_A_MSB1 ( .din(a[5]), .clk, .rst, .q(a_msb[1]) );
dff  D_FLIP_FLOP_A_MSB2 ( .din(a[6]), .clk, .rst, .q(a_msb[2]) );
dff  D_FLIP_FLOP_A_MSB3 ( .din(a[7]), .clk, .rst, .q(a_msb[3]) );

dff  D_FLIP_FLOP_B_MSB0 ( .din(b[4]), .clk, .rst, .q(b_msb[0]) );
dff  D_FLIP_FLOP_B_MSB1 ( .din(b[5]), .clk, .rst, .q(b_msb[1]) );
dff  D_FLIP_FLOP_B_MSB2 ( .din(b[6]), .clk, .rst, .q(b_msb[2]) );
dff  D_FLIP_FLOP_B_MSB3 ( .din(b[7]), .clk, .rst, .q(b_msb[3]) );

dff  D_FLIP_FLOP_A_MSB_S10 ( .din(a_msb[0]), .clk, .rst, .q(a_msb_s1[0]) );
dff  D_FLIP_FLOP_A_MSB_S11 ( .din(a_msb[1]), .clk, .rst, .q(a_msb_s1[1]) );
dff  D_FLIP_FLOP_A_MSB_S12 ( .din(a_msb[2]), .clk, .rst, .q(a_msb_s1[2]) );
dff  D_FLIP_FLOP_A_MSB_S13 ( .din(a_msb[3]), .clk, .rst, .q(a_msb_s1[3]) );

dff  D_FLIP_FLOP_B_MSB_S10 ( .din(b_msb[0]), .clk, .rst, .q(b_msb_s1[0]) );
dff  D_FLIP_FLOP_B_MSB_S11 ( .din(b_msb[1]), .clk, .rst, .q(b_msb_s1[1]) );
dff  D_FLIP_FLOP_B_MSB_S12 ( .din(b_msb[2]), .clk, .rst, .q(b_msb_s1[2]) );
dff  D_FLIP_FLOP_B_MSB_S13 ( .din(b_msb[3]), .clk, .rst, .q(b_msb_s1[3]) );


endmodule: modAdder
